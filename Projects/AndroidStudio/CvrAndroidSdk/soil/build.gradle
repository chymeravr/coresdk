apply plugin: 'com.android.library'

def soilModule = "${rootProject.rootDir}/soil"
def distributionDir = "${rootProject.rootDir}/distribution"

android {
    // compileSdkVersion 25
    // buildToolsVersion "25.0.0"
    compileSdkVersion project.getCompileSdkVersion()
    buildToolsVersion project.getBuildToolsVersion()
    
    defaultConfig {
        // minSdkVersion 23
        // targetSdkVersion 25
        minSdkVersion getMinSdkVersion(project.hmd)
        targetSdkVersion getTargetSdkVersion()
        versionCode 1
        versionName "1.0"

        externalNativeBuild {
            cmake {
                // when using arguments, the latest (cmake version 3.6+, android studio
                // beta2+) must be used to compile

                // I have to use gcc to compile, clang compiled code generate error
                // at run time for any std::queue etc.
                targets 'SOIL'
                def androidNdkLevel = getNativeNdkLevel(project.hmd)
                arguments = ['-DANDROID_STL=gnustl_shared'] //, '-DANDROID_NATIVE_API_LEVEL=android-23']
                arguments += "-DANDROID_NATIVE_API_LEVEL=android-" + androidNdkLevel

                abiFilters = getAbiFilters(project.hmdBuild)
            }
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            jniDebuggable true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cmake {
            path '../../../../SOIL/CMakeLists.txt'
        }
    }
}

task distributeDebugLib << {
    // trigger build library
    distributeNativeLib(project.hmdBuild, soilModule, distributionDir, "debug", "SOIL", "soil")
}

task distributeReleaseLib << {
    // trigger build library
    distributeNativeLib(project.hmdBuild, soilModule, distributionDir, "release", "SOIL", "soil")
}

task distributeLibs << {
    // trigger build library
    distributeNativeLib(project.hmdBuild, soilModule, distributionDir, "debug", "SOIL", "soil")
    distributeNativeLib(project.hmdBuild, soilModule, distributionDir, "release", "SOIL", "soil")
}

task deleteSoilBuild << {
    delete "${soilModule}/build"
}

task deleteDistLibs << {
    delete "${distributionDir}/soil"
}

build.finalizedBy(distributeLibs)
distributeLibs.dependsOn deleteDistLibs
//preBuild.dependsOn deleteSoilBuild
