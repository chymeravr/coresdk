apply plugin: 'com.android.library'

def coreEngineModule = "${rootProject.rootDir}/coreEngine"
def distributionDir = "${rootProject.rootDir}/distribution"

android {
    // compileSdkVersion 25
    // buildToolsVersion "25.0.0"
    compileSdkVersion project.getCompileSdkVersion()
    buildToolsVersion project.getBuildToolsVersion()
    
    defaultConfig {
        // minSdkVersion 23
        // targetSdkVersion 25
        minSdkVersion getMinSdkVersion(project.hmd)
        targetSdkVersion getTargetSdkVersion()
        versionCode 1
        versionName "1.0"

        externalNativeBuild {
            cmake {
                // when using arguments, the latest (cmake version 3.6+, android studio
                // beta2+) must be used to compile

                // I have to use gcc to compile, clang compiled code generate error
                // at run time for any std::queue etc.
                targets 'CoreEngine'
                def androidNdkLevel = getNativeNdkLevel(project.hmd)
                arguments = ['-DANDROID_STL=gnustl_shared'] //, "-DANDROID_NATIVE_API_LEVEL=android-23"]
                arguments += "-DANDROID_NATIVE_API_LEVEL=android-" + androidNdkLevel

                cppFlags = ["-DGLES2_0", "-std=c++11", "-frtti", "-fexceptions"]

                def openglesVersion = getOpenGLESVersion(project.hmd)
                arguments += "-D" + openglesVersion + "=TRUE"

                abiFilters = getAbiFilters(project.hmdBuild)
            }
        }

    }
    buildTypes {
        debug{
            minifyEnabled false
            jniDebuggable true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cmake {
            path '../../../../CoreEngine/CMakeLists.txt'
        }
    }

//    sourceSets {
//        main {
//            jniLibs.srcDirs = ["${distributionDir}/soil/release",
//                               "${distributionDir}/libjpeg/release",
//                               "${distributionDir}/freetype/release"]
//        }
//    }

}


task distributeDebugLib << {
    // trigger build library
    distributeNativeLib(project.hmdBuild, coreEngineModule, distributionDir,
            "debug", "CoreEngine", "coreEngine")
}

task distributeReleaseLib << {
    // trigger build library
    distributeNativeLib(project.hmdBuild, coreEngineModule, distributionDir,
            "release", "CoreEngine", "coreEngine")
}

task distributeLibs << {
    // trigger build library
    distributeNativeLib(project.hmdBuild, coreEngineModule, distributionDir,
            "debug", "CoreEngine", "coreEngine")
    distributeNativeLib(project.hmdBuild, coreEngineModule, distributionDir,
            "release", "CoreEngine", "coreEngine")
}


tasks.whenTaskAdded { task ->
    if (task.name.contains('compileDebug')) {
        task.dependsOn ':libjpeg:distributeDebugLib', ':freetype:distributeDebugLib'
    }
    else if(task.name.contains('compileRelease')) {
        task.dependsOn ':libjpeg:distributeReleaseLib', ':freetype:distributeReleaseLib'
    }
}

task deleteCoreEngineBuild << {
    delete "${coreEngineModule}/build"
}

// task to delete the existing distribution libraries
task deleteCoreEngineDist << {
    delete "${distributionDir}/coreEngine"
}
build.finalizedBy(distributeLibs)
distributeLibs.dependsOn deleteCoreEngineDist