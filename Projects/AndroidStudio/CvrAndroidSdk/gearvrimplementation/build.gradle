apply plugin: 'com.android.library'

def gearVrImplementationModule = "${rootProject.rootDir}/gearvrimplementation"
def distributionDir = "${rootProject.rootDir}/distribution"

android {
    // compileSdkVersion 25
    // buildToolsVersion "25.0.0"
    compileSdkVersion project.getCompileSdkVersion()
    buildToolsVersion project.getBuildToolsVersion()

    defaultConfig {
        // minSdkVersion 23
        // targetSdkVersion 25
        minSdkVersion getMinSdkVersion(project.hmd)
        targetSdkVersion getTargetSdkVersion()
        versionCode 1
        versionName "1.0"

        externalNativeBuild {
            cmake {
                // when using arguments, the latest (cmake version 3.6+, android studio
                // beta2+) must be used to compile

                // I have to use gcc to compile, clang compiled code generate error
                // at run time for any std::queue etc.
                targets 'GearVrImplementation'
                def androidNdkLevel = getNativeNdkLevel(project.hmd)
                arguments = ['-DANDROID_STL=gnustl_shared'] //, '-DANDROID_NATIVE_API_LEVEL=android-23']
                arguments += "-DANDROID_NATIVE_API_LEVEL=android-" + androidNdkLevel
                cppFlags = ["-DGLES2_0", "-std=c++11", "-frtti", "-fexceptions", '-Wall', '-fno-exceptions',
                            '-Wno-error=format-security', '-Wno-unused-function']

                //abiFilters 'armeabi-v7a'
                abiFilters = []
                abiFilters = getAbiFilters(project.hmdBuild)
            }
        }
    }
    buildTypes {
        debug{
            minifyEnabled false
            jniDebuggable true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cmake {
            path '../../../../GearVrImplementation/CMakeLists.txt'
        }
    }

    sourceSets {
        debug {
            jniLibs.srcDirs = ["${distributionDir}/coreEngine/debug", "${distributionDir}/glImplementation/debug",
                               "${distributionDir}/image360/debug"]
        }
        release {
            jniLibs.srcDirs = ["${distributionDir}/coreEngine/release", "${distributionDir}/glImplementation/release",
                               "${distributionDir}/image360/release"]
        }
    }
}


tasks.whenTaskAdded { task ->
    if (task.name.contains('compileDebug')) {
        task.dependsOn([':coreEngine:distributeDebugLib', ':glImplementation:distributeDebugLib',
                        ':image360:distributeDebugLib'])
    }
    else if(task.name.contains('compileRelease')) {
        task.dependsOn([':coreEngine:distributeReleaseLib', ':glImplementation:distributeReleaseLib',
                        ':image360:distributeReleaseLib'])
    }
}

task distributeDebugLib (type : Copy) {
    // trigger build library
    dependsOn "assembleDebug"
//    from "${image360OvrmModule}/build/intermediates/cmake/debug/obj/armeabi-v7a/libImage360Ovrm.so"
//    into "${distributionDir}/image360Ovrm/armeabi-v7a/"
    distributeNativeLib(project.hmdBuild, gearVrImplementationModule, distributionDir, "debug",
            "GearVrImplementation", "gearvrimplementation")

}

task(distributeReleaseLib, type : Copy) {
    // trigger build library
    dependsOn "assembleRelease"
//    from "${image360OvrmModule}/build/intermediates/cmake/release/obj/armeabi-v7a/libImage360Ovrm.so"
//    into "${distributionDir}/image360Ovrm/armeabi-v7a/"
    distributeNativeLib(project.hmdBuild, gearVrImplementationModule, distributionDir, "release",
            "GearVrImplementation", "gearvrimplementation")
}

task distributeLibs << {
    distributeNativeLib(project.hmdBuild, gearVrImplementationModule, distributionDir, "debug",
            "GearVrImplementation", "gearvrimplementation")
    distributeNativeLib(project.hmdBuild, gearVrImplementationModule, distributionDir, "release",
            "GearVrImplementation", "gearvrimplementation")
}

task deleteDistLibs << {
    delete "${distributionDir}/gearVrImplementationModule"
}
build.finalizedBy(distributeLibs)
distributeLibs.dependsOn deleteDistLibs