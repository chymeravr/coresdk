apply plugin: 'com.android.library'

def glImplementationModule = "${rootProject.rootDir}/glImplementation"
def distributionDir = "${rootProject.rootDir}/distribution"

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.0"

    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"

        externalNativeBuild {
            cmake {
                // when using arguments, the latest (cmake version 3.6+, android studio
                // beta2+) must be used to compile

                // I have to use gcc to compile, clang compiled code generate error
                // at run time for any std::queue etc.
                targets 'GLImplementation'
                arguments = ['-DANDROID_STL=gnustl_shared', '-DANDROID_NATIVE_API_LEVEL=android-23']

                cppFlags = ["-DGLES2_0", "-std=c++11", "-frtti", "-fexceptions"]

                // for all DAYDREAM supported architecutres
                if(project.build4daydream) {
                    arguments += "-DGLES_V2=TRUE"
                    // build for all daydream architectures concurrently
                    if(project.buildAllDaydreamArch) {
                        // build architectures for native android release lib
                        abiFilters = ['armeabi-v7a', 'arm64-v8a', 'x86']
                    }
                    else if(project.build4Unity){
                        // unity does not support arm64-v8a
                        abiFilters = ['armeabi-v7a', 'x86']
                    }
                    else{
                        // for pixel only - we dev on a 64 bit arch
                        abiFilters = ['arm64-v8a']
                    }
                }

                // for SAMSUNG GEARVR
                if(project.build4gearvr){
                    abiFilters = ['armeabi-v7a']
                    arguments += "-DGLES_V2=FALSE"
                }
            }
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            jniDebuggable true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cmake {
            path '../../../../GLImplementation/CMakeLists.txt'
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ["${distributionDir}/coreEngine"]
        }
    }

}

def copyNativeLib(source, target, buildType, arch) {
    copy {
        from "${source}/build/intermediates/cmake/${buildType}/obj/${arch}/libGLImplementation.so"
        into "${target}/glImplementation/${arch}/"
    }
}

task distributeDebugLib << {
    // trigger build library

    if(project.build4daydream) {

        if(project.buildAllDaydreamArch){
            copyNativeLib(glImplementationModule, distributionDir, "debug", "armeabi-v7a")
            copyNativeLib(glImplementationModule, distributionDir, "debug", "x86")
            copyNativeLib(glImplementationModule, distributionDir, "debug", "arm64-v8a")
        }
        else if(project.build4Unity){
            copyNativeLib(glImplementationModule, distributionDir, "debug", "armeabi-v7a")
            copyNativeLib(glImplementationModule, distributionDir, "debug", "x86")
        }
        else {
            copyNativeLib(glImplementationModule, distributionDir, "debug", "arm64-v8a")
        }
    }

    if(project.build4gearvr) {
        copyNativeLib(glImplementationModule, distributionDir, "debug", "armeabi-v7a")
    }
}

task distributeReleaseLib << {
    // trigger build library

    if(project.build4daydream) {

        if(project.buildAllDaydreamArch){
            copyNativeLib(glImplementationModule, distributionDir, "release", "armeabi-v7a")
            copyNativeLib(glImplementationModule, distributionDir, "release", "x86")
            copyNativeLib(glImplementationModule, distributionDir, "release", "arm64-v8a")
        }
        else if(project.build4Unity){
            copyNativeLib(glImplementationModule, distributionDir, "release", "armeabi-v7a")
            copyNativeLib(glImplementationModule, distributionDir, "release", "x86")
        }
        else{
            copyNativeLib(glImplementationModule, distributionDir, "release", "arm64-v8a")
        }
    }

    if(project.build4gearvr) {
        copyNativeLib(glImplementationModule, distributionDir, "release", "armeabi-v7a")
    }
}

tasks.whenTaskAdded { task ->
    if (task.name.contains('compileDebug')) {
        task.dependsOn ':coreEngine:distributeDebugLib'
    }
    else if(task.name.contains('compileRelease')) {
        task.dependsOn ':coreEngine:distributeReleaseLib'
    }
}

build.finalizedBy(distributeDebugLib)