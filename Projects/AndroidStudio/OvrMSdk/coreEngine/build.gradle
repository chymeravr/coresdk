apply plugin: 'com.android.library'

def soilModule = "${rootProject.rootDir}/soil"
def coreEngineModule = "${rootProject.rootDir}/coreEngine"
def distributionDir = "${rootProject.rootDir}/distribution"

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"

//        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                // when using arguments, the latest (cmake version 3.6+, android studio
                // beta2+) must be used to compile

                // I have to use gcc to compile, clang compiled code generate error
                // at run time for any std::queue etc.
                targets 'CoreEngine'
                arguments = ['-DANDROID_STL=gnustl_shared', '-DANDROID_NATIVE_API_LEVEL=android-23']

                cppFlags = ["-DGLES2_0", "-std=c++11", "-frtti", "-fexceptions"]

                abiFilters 'armeabi-v7a'
            }
        }

    }
    buildTypes {
        debug{
            minifyEnabled false
            jniDebuggable true
//            preBuild.dependsOn('copyDependSoilDebugLib')
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            preBuild.dependsOn('copyDependSoilReleaseLib')
        }
    }

    externalNativeBuild {
        cmake {
            path '../../../../CoreEngine/CMakeLists.txt'
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ["${distributionDir}/soil"]
        }
    }

}

//dependencies {
//    compile fileTree(include: ['*.jar'], dir: 'libs')
//    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
//        exclude group: 'com.android.support', module: 'support-annotations'
//    })
//    compile 'com.android.support:appcompat-v7:23.2.1'
//    testCompile 'junit:junit:4.12'
//}

//task copyDependSoilReleaseLib(type: Copy){
//    from "${soilModule}/build/intermediates/cmake/debug/obj/armeabi-v7a/libSOIL.so"
//    into "${coreEngineModule}/libs"
//}
//
//task copyDependSoilDebugLib(type: Copy){
//    from "${soilModule}/build/intermediates/cmake/release/obj/armeabi-v7a/libSOIL.so"
//    into "${coreEngineModule}/libs"
//}



task clean(type: Delete) {
    delete "${coreEngineModule}/build"
    delete fileTree(dir: 'libs', include: '*.so')
}


task distributeDebugLib (type : Copy) {
    // trigger build library
    dependsOn "assembleDebug"
    from "${coreEngineModule}/build/intermediates/cmake/debug/obj/armeabi-v7a/libCoreEngine.so"
    into "${distributionDir}/coreEngine/armeabi-v7a/"

}

task(distributeReleaseLib, type : Copy) {
    // trigger build library
    dependsOn "assembleRelease"
    from "${coreEngineModule}/build/intermediates/cmake/release/obj/armeabi-v7a/libCoreEngine.so"
    into "${distributionDir}/coreEngine/armeabi-v7a/"
}

tasks.whenTaskAdded { task ->
    if (task.name.contains('compileDebug')) {
        task.dependsOn ':soil:distributeDebugLib'
    }
    else if(task.name.contains('compileRelease')) {
        task.dependsOn ':soil:distributeReleaseLib'
    }
}