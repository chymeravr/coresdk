apply plugin: 'com.android.library'

def image360GvrModule = "${rootProject.rootDir}/image360gvr"
def distributionDir = "${rootProject.rootDir}/distribution"

android {
    compileSdkVersion 24
    buildToolsVersion "25.0.0"

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"

        externalNativeBuild {
            cmake {
                // when using arguments, the latest (cmake version 3.6+, android studio
                // beta2+) must be used to compile

                // I have to use gcc to compile, clang compiled code generate error
                // at run time for any std::queue etc.
                targets 'Image360Gvr'
                arguments = ['-DANDROID_STL=gnustl_shared', '-DANDROID_NATIVE_API_LEVEL=android-24']

                cppFlags = ["-DGLES2_0", "-std=c++11", "-frtti", "-fexceptions", '-Wall', '-fno-exceptions',
                            '-Wno-error=format-security', '-Wno-unused-function', '-Wno-unused-variable']

                // build for all daydream architectures concurrently
                if(project.buildAllDaydreamArch) {
                    // build architectures for native android release lib
                    abiFilters = ['armeabi-v7a', 'arm64-v8a', 'x86']
                }
                else if(project.build4Unity){
                    // unity does not support arm64-v8a
                    abiFilters = ['armeabi-v7a', 'x86']
                }
                else{
                    // for pixel only - we dev on a 64 bit arch
                    abiFilters = ['arm64-v8a']
                }
            }
        }
    }
    buildTypes {
        debug{
            minifyEnabled false
            jniDebuggable true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cmake {
            path '../../../../GVRAndroidImplementation/CMakeLists.txt'
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ["${distributionDir}/coreEngine", "${distributionDir}/glImplementation",
                               "${distributionDir}/renderer", "${distributionDir}/image360"]
        }
    }
}

tasks.whenTaskAdded { task ->
    if (task.name.contains('compileDebug')) {
        task.dependsOn([':coreEngine:distributeDebugLib', ':glImplementation:distributeDebugLib',
                        ':image360:distributeDebugLib'])
    }
    else if(task.name.contains('compileRelease')) {
        task.dependsOn([':coreEngine:distributeReleaseLib', ':glImplementation:distributeReleaseLib',
                        ':image360:distributeReleaseLib'])
    }
}


def copyNativeLib(source, target, buildType, arch) {
    copy {
        from "${source}/build/intermediates/cmake/${buildType}/obj/${arch}/libImage360Gvr.so"
        into "${target}/image360Gvr/${arch}/"
    }
}

task distributeDebugLib << {

        if(project.buildAllDaydreamArch){
            copyNativeLib(image360GvrModule, distributionDir, "debug", "armeabi-v7a")
            copyNativeLib(image360GvrModule, distributionDir, "debug", "x86")
            copyNativeLib(image360GvrModule, distributionDir, "debug", "arm64-v8a")
        }
        else if(project.build4Unity){
            copyNativeLib(image360GvrModule, distributionDir, "debug", "armeabi-v7a")
            copyNativeLib(image360GvrModule, distributionDir, "debug", "x86")
        }
        else{
            copyNativeLib(image360GvrModule, distributionDir, "debug", "arm64-v8a")
        }

}

task distributeReleaseLib << {
    // trigger build library

        if(project.buildAllDaydreamArch){
            copyNativeLib(image360GvrModule, distributionDir, "release", "armeabi-v7a")
            copyNativeLib(image360GvrModule, distributionDir, "release", "x86")
            copyNativeLib(image360GvrModule, distributionDir, "release", "arm64-v8a")
        }
        else if(project.build4Unity){
            copyNativeLib(image360GvrModule, distributionDir, "release", "armeabi-v7a")
            copyNativeLib(image360GvrModule, distributionDir, "release", "x86")
        }
        else{
            copyNativeLib(image360GvrModule, distributionDir, "release", "arm64-v8a")
        }

}

build.dependsOn(':extractNdk')
build.finalizedBy(distributeDebugLib)