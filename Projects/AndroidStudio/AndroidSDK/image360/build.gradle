apply plugin: 'com.android.model.native'

def repository_root = "../../../../repository"
def image360_root = "../../../../image360"
def coreengine_root = "${repository_root}/coreEngine/android"
model {
    repositories{
        libs(PrebuiltLibraries) {
            // Configure one pre-built lib: shared
            coreengine {
                // Inform Android Studio where header file dir for this lib
                headers.srcDir "${coreengine_root}/include"
                // Inform Android Studio where lib is -- each ABI should have a lib file
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("${coreengine_root}/lib/${targetPlatform.getName()}/libcoreengine.so")
                }
            }
        }
    }
    android {
        compileSdkVersion = 23
        buildToolsVersion = "23.0.3"

        defaultConfig {
            minSdkVersion.apiLevel = 19
            targetSdkVersion.apiLevel = 23
            versionCode = 1
            versionName = "1.0"
        }

        ndk{
            moduleName = "image360"
            cppFlags.add("-std=c++11")
            cppFlags.add("-frtti ")
            cppFlags.add("-fexceptions")
            cppFlags.add("-I" + file("${repository_root}/thirdParty/glm/glm-0.9.7.6/glm").absolutePath)
            cppFlags.add("-I" + file("${image360_root}/include").absolutePath)
            cppFlags.add("-I" + file("${coreengine_root}/include").absolutePath)
            stl = "gnustl_shared"
            abiFilters.addAll(['armeabi', 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64', 'mips', 'mips64']) //this is default
            ldLibs.addAll(["EGL", "GLESv2"])
        }
        sources{
            main{
                jni{
                    dependencies{
                        library 'coreengine' linkage 'shared'
                    }
                    source{
                        srcDir "${image360_root}"
                    }
                }
                //jniLibs {
                // for shared lib, lib need to be pushed to the target too
                // Once libs are copied into app/src/main/jniLibs directory,
                // Android Studio will pack them into APK's lib/ directory
                // Here we like to avoid another duplication by pointing
                // to the files that containing our libs' distribution location
                // so the same file is used by compiler at host, also packed
                // into APk to be used at Target (phone/tablet)
                //    source {
                //        srcDir "${coreengine_root}/lib"
                //    }
                //}
            }
        }
    }
}


//  Unnecessary dependency management:
//  Make sure the libs are available when begin compiling application project
//  This could be ignored because in real scenario, the pre-built libs are
//  already given to us before creating application.
tasks.whenTaskAdded { task ->
    if (task.name.contains('compile')) {
        task.dependsOn ':coreengine:distributeLib'
    }
}

// This is just copy out the header file and built lib into distribution
// directory for clint application to use; it is a small overhead of this sample:
//    both lib and app are put inside one project space [save maintenance time]
task(distributeLib, type : Copy) {
    // trigger build library
    // trigger build library
    dependsOn assemble
    into "${repository_root}/image360/android"
    from("${image360_root}/include/image360") {
        into "include/image360"
        //include "**/*.h" //not required anymore as .h are separated now in includes
    }
    from("build/outputs/native/release/lib") {
        into "lib/"
        exclude "**/libgnustl*.so"
    }
}