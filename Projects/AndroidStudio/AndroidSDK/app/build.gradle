apply plugin: 'com.android.model.application'

// Root of 3rd party lib(s): location could be anywhere on the host system
def repository_root = "../../../../repository"
def androidsdk_root = "../../../../androidSDK"
def coreengine_root = "${repository_root}/coreEngine/android"
def glimplementation_root = "${repository_root}/glImplementation/android"
def image360_root = "${repository_root}/image360/android"
def ovr_mobile_root = "${repository_root}/oculus/ovr_sdk_mobile_1.0.3"

model {
    repositories {
        libs(PrebuiltLibraries) {
            // Configure one pre-built lib: shared
            coreengine {
                // Inform Android Studio where header file dir for this lib
                headers.srcDir "${coreengine_root}/include"
                // Inform Android Studio where lib is -- each ABI should have a lib file
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("${coreengine_root}/lib/${targetPlatform.getName()}/libcoreengine.so")
                }
            }
            glimplementation {
                // Inform Android Studio where header file dir for this lib
                headers.srcDir "${glimplementation_root}/include"
                // Inform Android Studio where lib is -- each ABI should have a lib file
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("${glimplementation_root}/lib/${targetPlatform.getName()}/libglimplementation.so")
                }
            }
            image360 {
                // Inform Android Studio where header file dir for this lib
                headers.srcDir "${image360_root}/include"
                // Inform Android Studio where lib is -- each ABI should have a lib file
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("${image360_root}/lib/${targetPlatform.getName()}/libimage360.so")
                }
            }
            vrapi{
                headers.srcDir "${ovr_mobile_root}/VrApi/Include"
                binaries.withType(SharedLibraryBinary){
                    sharedLibraryFile = file("${ovr_mobile_root}/VrApi/Libs/Android/${targetPlatform.getName()}/libvrapi.so")
                }
            }
            systemutils{
                headers.srcDir "${ovr_mobile_root}/VrAppSupport/SystemUtils/Include"
                binaries.withType(StaticLibraryBinary){
                    staticLibraryFile = file("${ovr_mobile_root}/VrAppSupport/SystemUtils/Libs/Android/${targetPlatform.getName()}/libsystemutils.a")
                }
            }
            libovrkernel{
                headers.srcDir "${ovr_mobile_root}/LibOVRKernel/Src"
                binaries.withType(StaticLibraryBinary){
                    staticLibraryFile = file("${ovr_mobile_root}/LibOVRKernel/Libs/Android/${targetPlatform.getName()}/libovrkernel.a")
                }
            }
            libopenglloader{
                headers.srcDir "${ovr_mobile_root}/1stParty/OpengGL_Loader/Include"
                binaries.withType(StaticLibraryBinary){
                    staticLibraryFile = file("${ovr_mobile_root}/1stParty/OpenGL_Loader/Libs/Android/${targetPlatform.getName()}/libopenglloader.a")
                }
            }
            // Configure another pre-built lib: shared;[change to static after Studio supports]
            // static lib generation. USING static lib is supported NOW, for that case,
            // simple change:
            //  SharedLibaryBinary --> StaticLibraryBinary
            //  sharedLibraryFile  --> staticLibraryFile
            //  *.so --> *.a
        }
    }
    android {
        compileSdkVersion = 23
        buildToolsVersion = "23.0.3"
        defaultConfig.with {
            applicationId = "co.chimeralabs.sdk.android"
            minSdkVersion.apiLevel = 19
            targetSdkVersion.apiLevel = 23
            versionCode = 1
            versionName = "1.0"
        }
        buildTypes {
            release {
                minifyEnabled false
                proguardFiles.add(file('proguard-android.txt'))
            }
            // debug {
            //jniDebuggable = true
            // }
        }
        ndk{
            platformVersion = 21
            moduleName = 'image360gear_jni'
            //toolchain = 'clang'
            cppFlags.add("-std=c++11")
            cppFlags.add("-frtti ")
            cppFlags.add("-fexceptions")
            cppFlags.add("-I" + file("${androidsdk_root}/src/main/jni/CL").absolutePath)
            cppFlags.add("-I" + file("${repository_root}/thirdParty/glm/glm-0.9.7.6/glm").absolutePath)
            cppFlags.add("-I" + file("${ovr_mobile_root}/VrApi/Include").absolutePath)
            cppFlags.add("-I" + file("${ovr_mobile_root}/VrAppSupport/SystemUtils/Include").absolutePath)
            cppFlags.add("-I" + file("${ovr_mobile_root}/1stParty/OpenGL_Loader/Include").absolutePath)
            cppFlags.add("-I" + file("${coreengine_root}/include").absolutePath)
            cppFlags.add("-I" + file("${glimplementation_root}/include").absolutePath)
            cppFlags.add("-I" + file("${image360_root}/include").absolutePath)
            stl = 'gnustl_shared'
            ldFlags.add("-Lsrc/main/jniLibs/armeabi-v7a")
            ldLibs.addAll(["log", "android", "EGL", "GLESv2"])
        }
        sources{
            main{
                manifest{
                    source{
                        srcDir "${androidsdk_root}/src/main"
                    }
                }
                res{
                    source{
                        srcDir "${androidsdk_root}/src/main/res"
                    }
                }
                assets{
                    source{
                        srcDir "${androidsdk_root}/assets"
                    }
                }
                java{
                    source{
                        srcDir "${androidsdk_root}/src/main/java"
                    }
                }
                jni{
                    dependencies {
                        // if gperf were *.a, change shared --> static
                        library 'coreengine' linkage 'shared'
                        library 'glimplementation' linkage 'shared'
                        library 'image360' linkage 'shared'
                        library 'systemutils' linkage 'static'
                        library 'libovrkernel' linkage 'static'
                        library 'vrapi' linkage 'shared'
                        library 'libopenglloader' linkage 'static'
                    }
                    source{
                        srcDir "${androidsdk_root}/src/main/jni"
                    }
                }
                jniLibs {
                    // for shared lib, lib need to be pushed to the target too
                    // Once libs are copied into app/src/main/jniLibs directory,
                    // Android Studio will pack them into APK's lib/ directory
                    // Here we like to avoid another duplication by pointing
                    // to the files that containing our libs' distribution location
                    // so the same file is used by compiler at host, also packed
                    // into APk to be used at Target (phone/tablet)
                    source {
                        srcDir "${coreengine_root}/lib"
                        srcDir "${glimplementation_root}/lib"
                        srcDir "${image360_root}/lib"
                        srcDir "${ovr_mobile_root}/VrApi/Libs/Android"
                    }
                }
            }
        }
        productFlavors {
            create("arm7") {
                ndk.abiFilters.add("armeabi-v7a")
            }
        }
    }
}

dependencies {
    println rootProject.getName()
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.1.1'
}

//  Unnecessary dependency management:
//  Make sure the libs are available when begin compiling application project
//  This could be ignored because in real scenario, the pre-built libs are
//  already given to us before creating application.
tasks.whenTaskAdded { task ->
    if (task.name.contains('compile')) {
        task.dependsOn ':coreengine:distributeLib'
        task.dependsOn ':glimplementation:distributeLib'
        task.dependsOn ':image360:distributeLib'
    }
}